# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
import itertools
d0 = [ 8, 14, 13, 7, 15, 12, 16, 15, 12, 9 ]
d1 = [ 8, 14, 13, 7, 15 ]

d2 = [ 8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9
]

d3 = [
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
   8, 14, 13, 7, 15, 12, 16, 15, 12, 9, 20, 22, 15, 12, 11,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9,
  25, 13, 7, 10, 6, 11, 11, 5, 8, 16, 7, 11, 18, 12, 9
]

d4 = [
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  80000, 140000, 130000, 70000, 150000, 120000, 160000, 150000, 120000, 90000, 200000, 220000, 150000, 120000, 110000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000,
  250000, 130000, 70000, 100000, 60000, 110000, 110000, 50000, 80000, 160000, 70000, 110000, 180000, 120000, 90000
]


# %%
class List:
    def __init__(self, x:list, value, next=None):
        self.x = x
        self.value = value
        self.next = next

class LinkedList:
    def __init__(self):
        self.top = List(None, None)

    def index(self,num):
        cp = self.top
        while cp:
            if cp.value == num:
                for i in range(len(cp.x)):
                    cp.x[i] += 1
                print("最小の組み合わせは, ", end="")
                print(cp.x)
                break
            cp = cp.next


    def insert(self, x, value):
        front = self.top
        rear = front.next
        while rear and value < rear.value:
            front = rear
            rear = rear.next
        cell = List(x, value)
        cell.next = rear
        front.next = cell

    def show(self):
        p = self.top.next
        while p:
            print(p.x)
            print(p.value)
            p = p.next


# %%
def mysum(left, right, data):
    return sum(data[left:right])


# %%
def main(data):
    l = LinkedList()
    n = int(input())
    print("n = {:d}".format(n))
    total = sum(data)
    max_d = 0

    for x in itertools.combinations(list(range(len(data))), n):
        x = list(x)
        min_d = total-mysum(x[0], x[-1], data)
        for i in range(len(x)-1):
            min_d = min([min_d, mysum(x[i], x[i+1], data)])
        l.insert(x, min_d)
        max_d = max(max_d, min_d)
    l.index(max_d)
    print(max_d)


# %%
main(d1)


# %%
main(d1)


# %%
main(d1)


# %%
main(d0)


# %%
main(d0)


# %%
main(d0)


# %%
